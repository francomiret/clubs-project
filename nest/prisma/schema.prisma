generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Club {
  id         String     @id @default(uuid())
  name       String
  users      UserClub[]
  roles      Role[]
  members    Member[]
  sponsors   Sponsor[]
  payments   Payment[]
  properties Property[]
  activities Activity[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  name      String
  clubs     UserClub[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model UserClub {
  id     String @id @default(uuid())
  userId String
  clubId String
  roleId String

  user User @relation(fields: [userId], references: [id])
  club Club @relation(fields: [clubId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@unique([userId, clubId])
}

model Role {
  id          String           @id @default(uuid())
  name        String
  clubId      String
  club        Club             @relation(fields: [clubId], references: [id])
  permissions RolePermission[]
  userClubs   UserClub[]

  @@unique([name, clubId])
}

model Permission {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  roles       RolePermission[]
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

model Member {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  clubId    String
  club      Club      @relation(fields: [clubId], references: [id])
  payments  Payment[]
  createdAt DateTime  @default(now())
}

model Sponsor {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  clubId    String
  club      Club      @relation(fields: [clubId], references: [id])
  payments  Payment[]
  createdAt DateTime  @default(now())
}

model Payment {
  id          String   @id @default(uuid())
  amount      Float
  description String?
  date        DateTime
  memberId    String?
  sponsorId   String?
  clubId      String
  club        Club     @relation(fields: [clubId], references: [id])
  member      Member?  @relation(fields: [memberId], references: [id])
  sponsor     Sponsor? @relation(fields: [sponsorId], references: [id])
}

model Property {
  id          String   @id @default(uuid())
  name        String
  description String?
  address     String
  type        String
  capacity    Int?
  amenities   String[]
  clubId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  club Club @relation(fields: [clubId], references: [id])
}

model Activity {
  id                  String   @id @default(uuid())
  name                String
  description         String?
  type                String
  startDate           DateTime
  endDate             DateTime
  location            String
  maxParticipants     Int?
  currentParticipants Int      @default(0)
  clubId              String
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  club Club @relation(fields: [clubId], references: [id])
}
