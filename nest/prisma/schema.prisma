// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Club {
  id        String    @id @default(uuid())
  name      String
  users     User[]
  members   Member[]
  sponsors  Sponsor[]
  payments  Payment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      Role
  clubId    String
  club      Club     @relation(fields: [clubId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  TREASURER
  MEMBER
  SPONSOR
}

model Member {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  clubId    String
  club      Club      @relation(fields: [clubId], references: [id])
  payments  Payment[]
  createdAt DateTime  @default(now())
}

model Sponsor {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  clubId    String
  club      Club      @relation(fields: [clubId], references: [id])
  payments  Payment[]
  createdAt DateTime  @default(now())
}

model Payment {
  id          String   @id @default(uuid())
  amount      Float
  description String?
  date        DateTime
  memberId    String? // Puede ser null si el pago es de sponsor
  sponsorId   String?
  clubId      String
  club        Club     @relation(fields: [clubId], references: [id])
  member      Member?  @relation(fields: [memberId], references: [id])
  sponsor     Sponsor? @relation(fields: [sponsorId], references: [id])
}
